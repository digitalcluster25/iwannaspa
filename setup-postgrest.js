#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgREST —Ä–æ–ª–µ–π
 */

import { Client } from 'pg';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Railway PostgreSQL
const railwayConfig = {
  host: 'switchback.proxy.rlwy.net',
  port: 44855,
  database: 'railway',
  user: 'postgres',
  password: 'piAlmgrclkSirLRLJfGwJizmKrIpKaXs',
  ssl: {
    rejectUnauthorized: false
  }
};

async function setupPostgREST() {
  const client = new Client(railwayConfig);
  
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway PostgreSQL...');
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ß–∏—Ç–∞–µ–º SQL –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π
    const rolesPath = path.join(__dirname, 'setup-postgrest-roles.sql');
    const rolesSQL = fs.readFileSync(rolesPath, 'utf8');
    
    console.log('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π PostgREST...');
    
    try {
      await client.query(rolesSQL);
      console.log('‚úÖ –†–æ–ª–∏ PostgREST —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π:', error.message);
      throw error;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π...');
    const rolesResult = await client.query(`
      SELECT rolname, rolsuper, rolinherit, rolcreaterole, rolcreatedb, rolcanlogin 
      FROM pg_roles 
      WHERE rolname IN ('web_anon', 'web_auth', 'app_user', 'app_admin')
      ORDER BY rolname
    `);

    console.log(`\nüë• –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ä–æ–ª–µ–π: ${rolesResult.rows.length}`);
    rolesResult.rows.forEach(row => {
      console.log(`  - ${row.rolname} (super: ${row.rolsuper}, login: ${row.rolcanlogin})`);
    });

    console.log('\nüéâ PostgREST —Ä–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');
    console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å PostgREST —Å–µ—Ä–≤–∏—Å –Ω–∞ Railway');
    console.log('2. –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API endpoints');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  } finally {
    await client.end();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  setupPostgREST().catch(console.error);
}

export { setupPostgREST };
