#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Iwanna
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */

import { createClient } from '@supabase/supabase-js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://ewkeuupfristqqonkcph.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV3a2V1dXBmcmlzdHFxb25rY3BoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg4NDI0MDQsImV4cCI6MjA3NDQxODQwNH0.YduF49boh1jK40-Lk1nbie9JVtF0AsPyn_08JC-HX6E';

async function testApp() {
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
    console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...');
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω
    console.log('\nüåç –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω');
    try {
      const { data: countries, error } = await supabase
        .from('countries')
        .select('*')
        .limit(5);
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω:', error.message);
      } else {
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞–Ω: ${countries.length}`);
        countries.forEach(country => {
          console.log(`  - ${country.name} (${country.code})`);
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å—Ç—Ä–∞–Ω:', error.message);
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≥–æ—Ä–æ–¥–æ–≤
    console.log('\nüèôÔ∏è –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤');
    try {
      const { data: cities, error } = await supabase
        .from('cities')
        .select('*')
        .limit(5);
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤:', error.message);
      } else {
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: ${cities.length}`);
        cities.forEach(city => {
          console.log(`  - ${city.name} ${city.district ? `(${city.district})` : ''}`);
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –≥–æ—Ä–æ–¥–æ–≤:', error.message);
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –°–ü–ê
    console.log('\nüèä –¢–µ—Å—Ç 3: –ó–∞–≥—Ä—É–∑–∫–∞ –°–ü–ê –∫–æ–º–ø–ª–µ–∫—Å–æ–≤');
    try {
      const { data: spas, error } = await supabase
        .from('spas')
        .select(`
          *,
          city:cities(name),
          brand:brands(name)
        `)
        .limit(5);
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –°–ü–ê:', error.message);
      } else {
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –°–ü–ê: ${spas.length}`);
        spas.forEach(spa => {
          console.log(`  - ${spa.name} ‚Üí ${spa.city?.name || '–ë–µ–∑ –≥–æ—Ä–æ–¥–∞'} (${spa.brand?.name || '–ë–µ–∑ –±—Ä–µ–Ω–¥–∞'})`);
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –°–ü–ê:', error.message);
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π
    console.log('\nüë• –¢–µ—Å—Ç 4: –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π');
    try {
      const { data: profiles, error } = await supabase
        .from('profiles')
        .select('*')
        .limit(5);
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π:', error.message);
      } else {
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: ${profiles.length}`);
        profiles.forEach(profile => {
          console.log(`  - ${profile.name} (${profile.role}) - ${profile.active ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π:', error.message);
    }

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —É—Å–ª—É–≥ –°–ü–ê
    console.log('\nüíÜ –¢–µ—Å—Ç 5: –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥ –°–ü–ê');
    try {
      const { data: services, error } = await supabase
        .from('spa_services')
        .select(`
          *,
          spa:spas(name)
        `)
        .limit(5);
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥:', error.message);
      } else {
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ª—É–≥: ${services.length}`);
        services.forEach(service => {
          console.log(`  - ${service.name} ‚Üí ${service.spa?.name || '–ë–µ–∑ –°–ü–ê'} (${service.price} –≥—Ä–Ω)`);
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —É—Å–ª—É–≥:', error.message);
    }

    // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    console.log('\nüåê –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    try {
      const response = await fetch('http://localhost:3001/');
      if (response.ok) {
        console.log('‚úÖ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ');
        const html = await response.text();
        if (html.includes('SPA Complex Catalog')) {
          console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–π–¥–µ–Ω');
        } else {
          console.log('‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
      } else {
        console.log(`‚ùå –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: ${response.status}`);
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${error.message}`);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã');
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  testApp().catch(console.error);
}

export { testApp };
