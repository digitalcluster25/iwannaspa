#!/usr/bin/env node

/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Railway PostgreSQL
 */

import { Client } from 'pg';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Railway PostgreSQL
const railwayConfig = {
  host: 'switchback.proxy.rlwy.net',
  port: 44855,
  database: 'railway',
  user: 'postgres',
  password: 'piAlmgrclkSirLRLJfGwJizmKrIpKaXs',
  ssl: {
    rejectUnauthorized: false
  }
};

async function testRailwayIntegration() {
  const client = new Client(railwayConfig);
  
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway PostgreSQL...');
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await client.query('SET search_path TO app, public;');

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Å–µ—Ä–≤–µ—Ä
    console.log('\nüåê –¢–µ—Å—Ç 1: API —Å–µ—Ä–≤–µ—Ä');
    try {
      const response = await fetch('http://localhost:3000/');
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`üì° –î–æ—Å—Ç—É–ø–Ω–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: ${data.endpoints.length}`);
      } else {
        console.log(`‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`);
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    console.log('\nüåê –¢–µ—Å—Ç 2: –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
    try {
      const response = await fetch('http://localhost:3001/');
      if (response.ok) {
        console.log('‚úÖ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ');
        const html = await response.text();
        if (html.includes('SPA Complex Catalog')) {
          console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–π–¥–µ–Ω');
        }
      } else {
        console.log(`‚ùå –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: ${response.status}`);
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${error.message}`);
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
    console.log('\nüìä –¢–µ—Å—Ç 3: –î–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API');
    try {
      const countriesResponse = await fetch('http://localhost:3000/countries');
      if (countriesResponse.ok) {
        const countries = await countriesResponse.json();
        console.log(`‚úÖ –°—Ç—Ä–∞–Ω—ã —á–µ—Ä–µ–∑ API: ${countries.length} –∑–∞–ø–∏—Å–µ–π`);
      }

      const spasResponse = await fetch('http://localhost:3000/spas');
      if (spasResponse.ok) {
        const spas = await spasResponse.json();
        console.log(`‚úÖ –°–ü–ê —á–µ—Ä–µ–∑ API: ${spas.length} –∑–∞–ø–∏—Å–µ–π`);
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API: ${error.message}`);
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
    console.log('\nüóÑÔ∏è –¢–µ—Å—Ç 4: –î–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î');
    try {
      const countriesResult = await client.query('SELECT COUNT(*) FROM countries');
      const spasResult = await client.query('SELECT COUNT(*) FROM spas');
      const profilesResult = await client.query('SELECT COUNT(*) FROM profiles');
      
      console.log(`‚úÖ –°—Ç—Ä–∞–Ω—ã –≤ –ë–î: ${countriesResult.rows[0].count}`);
      console.log(`‚úÖ –°–ü–ê –≤ –ë–î: ${spasResult.rows[0].count}`);
      console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏ –≤ –ë–î: ${profilesResult.rows[0].count}`);
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î: ${error.message}`);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('‚úÖ Railway PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API');
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î');

    console.log('\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –î–µ–ø–ª–æ–π API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Railway');
    console.log('2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–∞ –¥–ª—è API');
    console.log('3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ URL –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
    console.log('4. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  } finally {
    await client.end();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  testRailwayIntegration().catch(console.error);
}

export { testRailwayIntegration };
