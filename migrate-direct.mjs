// –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–µ–∑ npm
import('./src/lib/supabase.js').then(({ supabase }) => {
  import('./src/data/mockData.js').then(async ({ 
    mockSpas, 
    mockCities, 
    mockCategories, 
    mockPurposes, 
    mockAmenities,
    mockServiceTemplates
  }) => {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ Supabase...\n')

    try {
      // 1. –ú–∏–≥—Ä–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞
      console.log('üìç –ú–∏–≥—Ä–∞—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤...')
      for (const city of mockCities) {
        const { error } = await supabase
          .from('cities')
          .upsert({ 
            name: city.name, 
            active: city.active 
          }, { 
            onConflict: 'name' 
          })
        
        if (error) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${city.name}:`, error.message)
        } else {
          console.log(`  ‚úÖ ${city.name}`)
        }
      }

      // 2. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      console.log('\nüìÇ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π...')
      for (const category of mockCategories) {
        const { error } = await supabase
          .from('categories')
          .upsert({ 
            name: category.name,
            label: category.name,
            value: category.value, 
            active: category.active 
          }, { 
            onConflict: 'value' 
          })
        
        if (error) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.name}:`, error.message)
        } else {
          console.log(`  ‚úÖ ${category.name}`)
        }
      }

      // 3. –ú–∏–≥—Ä–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      console.log('\nüéØ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π...')
      for (const purpose of mockPurposes) {
        const { error } = await supabase
          .from('purposes')
          .upsert({ 
            name: purpose.name,
            label: purpose.name,
            value: purpose.value, 
            active: purpose.active 
          }, { 
            onConflict: 'value' 
          })
        
        if (error) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ${purpose.name}:`, error.message)
        } else {
          console.log(`  ‚úÖ ${purpose.name}`)
        }
      }

      // 4. –ú–∏–≥—Ä–∏—Ä—É–µ–º —É–¥–æ–±—Å—Ç–≤–∞
      console.log('\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è —É–¥–æ–±—Å—Ç–≤...')
      for (const amenity of mockAmenities) {
        const { error } = await supabase
          .from('amenities')
          .upsert({ 
            name: amenity.name, 
            active: amenity.active 
          }, { 
            onConflict: 'name' 
          })
        
        if (error) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ ${amenity.name}:`, error.message)
        } else {
          console.log(`  ‚úÖ ${amenity.name}`)
        }
      }

      // 5. –ú–∏–≥—Ä–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã —É—Å–ª—É–≥
      console.log('\nüõ†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —É—Å–ª—É–≥...')
      for (const service of mockServiceTemplates) {
        const { error } = await supabase
          .from('service_templates')
          .upsert({ 
            name: service.name, 
            active: service.active 
          }, { 
            onConflict: 'name' 
          })
        
        if (error) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —É—Å–ª—É–≥–∏ ${service.name}:`, error.message)
        } else {
          console.log(`  ‚úÖ ${service.name}`)
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º ID –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å–≤—è–∑–∏
      const { data: cities } = await supabase.from('cities').select('id, name')
      const cityMap = new Map(cities?.map(c => [c.name, c.id]) || [])

      // –ü–æ–ª—É—á–∞–µ–º ID —É–¥–æ–±—Å—Ç–≤
      const { data: amenities } = await supabase.from('amenities').select('id, name')
      const amenityMap = new Map(amenities?.map(a => [a.name, a.id]) || [])

      // 6. –ú–∏–≥—Ä–∏—Ä—É–µ–º –°–ü–ê
      console.log('\nüè® –ú–∏–≥—Ä–∞—Ü–∏—è –°–ü–ê –∫–æ–º–ø–ª–µ–∫—Å–æ–≤...')
      for (const spa of mockSpas) {
        try {
          // –°–æ–∑–¥–∞–µ–º –°–ü–ê
          const { data: spaData, error: spaError } = await supabase
            .from('spas')
            .insert({
              name: spa.name,
              description: spa.description,
              price: spa.price,
              rating: spa.rating,
              review_count: spa.reviewCount,
              location: spa.location,
              city_id: cityMap.get(spa.location) || null,
              images: spa.images,
              category: spa.category,
              purpose: spa.purpose,
              featured: spa.featured,
              active: spa.active,
              created_at: spa.createdAt
            })
            .select()
            .single()
          
          if (spaError) {
            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –°–ü–ê ${spa.name}:`, spaError.message)
            continue
          }

          console.log(`  ‚úÖ ${spa.name}`)

          // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏
          if (spa.services && spa.services.length > 0) {
            const { error: servicesError } = await supabase
              .from('spa_services')
              .insert(
                spa.services.map(s => ({
                  spa_id: spaData.id,
                  name: s.name,
                  description: s.description,
                  price: s.price,
                  image: s.image
                }))
              )
            
            if (servicesError) {
              console.error(`    ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥:`, servicesError.message)
            } else {
              console.log(`    ‚úÖ –£—Å–ª—É–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã (${spa.services.length})`)
            }
          }

          // –î–æ–±–∞–≤–ª—è–µ–º —É–¥–æ–±—Å—Ç–≤–∞
          if (spa.amenities && spa.amenities.length > 0) {
            const amenityIds = spa.amenities
              .map(name => amenityMap.get(name))
              .filter(Boolean)

            if (amenityIds.length > 0) {
              const { error: amenitiesError } = await supabase
                .from('spa_amenities')
                .insert(
                  amenityIds.map(amenityId => ({
                    spa_id: spaData.id,
                    amenity_id: amenityId
                  }))
                )
              
              if (amenitiesError) {
                console.error(`    ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–¥–æ–±—Å—Ç–≤:`, amenitiesError.message)
              } else {
                console.log(`    ‚úÖ –£–¥–æ–±—Å—Ç–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã (${amenityIds.length})`)
              }
            }
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
          if (spa.contactInfo) {
            const { error: contactError } = await supabase
              .from('spa_contacts')
              .insert({
                spa_id: spaData.id,
                phone: spa.contactInfo.phone,
                email: spa.contactInfo.email,
                working_hours: spa.contactInfo.workingHours,
                whatsapp: spa.contactInfo.whatsapp,
                telegram: spa.contactInfo.telegram
              })
            
            if (contactError) {
              console.error(`    ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:`, contactError.message)
            } else {
              console.log(`    ‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã`)
            }
          }

        } catch (error) {
          console.error(`  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è ${spa.name}:`, error)
        }
      }

      console.log('\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
      console.log(`  ‚Ä¢ –ì–æ—Ä–æ–¥–æ–≤: ${mockCities.length}`)
      console.log(`  ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${mockCategories.length}`)
      console.log(`  ‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–π: ${mockPurposes.length}`)
      console.log(`  ‚Ä¢ –£–¥–æ–±—Å—Ç–≤: ${mockAmenities.length}`)
      console.log(`  ‚Ä¢ –®–∞–±–ª–æ–Ω–æ–≤ —É—Å–ª—É–≥: ${mockServiceTemplates.length}`)
      console.log(`  ‚Ä¢ –°–ü–ê –∫–æ–º–ø–ª–µ–∫—Å–æ–≤: ${mockSpas.length}`)

    } catch (error) {
      console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
      process.exit(1)
    }
  })
})
