import pg from 'pg';

// Supabase REST API
const SUPABASE_URL = 'https://ewkeuupfristqqonkcph.supabase.co';
const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV3a2V1dXBmcmlzdHFxb25rY3BoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg4NDI0MDQsImV4cCI6MjA3NDQxODQwNH0.YduF49boh1jK40-Lk1nbie9JVtF0AsPyn_08JC-HX6E';

// Railway PostgreSQL
const railwayConnection = 'postgresql://postgres:piAlmgrclkSirLRLJfGwJizmKrIpKaXs@switchback.proxy.rlwy.net:44855/railway';
const railway = new pg.Client({ connectionString: railwayConnection });

console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway PostgreSQL...');

async function fetchFromSupabase(table) {
  const response = await fetch(`${SUPABASE_URL}/rest/v1/${table}?select=*`, {
    headers: {
      'apikey': SUPABASE_KEY,
      'Authorization': `Bearer ${SUPABASE_KEY}`
    }
  });
  
  if (!response.ok) {
    throw new Error(`HTTP ${response.status}: ${await response.text()}`);
  }
  
  return await response.json();
}

try {
  await railway.connect();
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Railway');

  // –ü–æ—Ä—è–¥–æ–∫ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–∞–±–ª–∏—Ü (–≤–∞–∂–µ–Ω –∏–∑-–∑–∞ foreign keys)
  const tables = [
    'countries',
    'categories', 
    'purposes',
    'amenities',
    'service_templates',
    'cities',
    'profiles',
    'brands',
    'spas',
    'spa_services',
    'spa_amenities',
    'spa_contacts',
    'leads',
  ];

  let totalCopied = 0;

  for (const table of tables) {
    try {
      console.log(`üì• –ó–∞–≥—Ä—É–∑–∫–∞ ${table} –∏–∑ Supabase...`);
      const rows = await fetchFromSupabase(table);
      
      if (rows.length === 0) {
        console.log(`‚è≠Ô∏è  ${table}: –ø—É—Å—Ç–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
      const columns = Object.keys(rows[0]);
      const placeholders = columns.map((_, i) => `$${i + 1}`).join(', ');
      const columnNames = columns.join(', ');

      // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ Railway
      for (const row of rows) {
        const values = columns.map(col => row[col]);
        
        await railway.query(
          `INSERT INTO ${table} (${columnNames}) VALUES (${placeholders}) ON CONFLICT DO NOTHING`,
          values
        );
      }

      totalCopied += rows.length;
      console.log(`‚úÖ ${table}: —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ${rows.length} –∑–∞–ø–∏—Å–µ–π`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ ${table}:`, error.message);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
    }
  }

  console.log(`\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: ${totalCopied} –∑–∞–ø–∏—Å–µ–π`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Railway:');
  for (const table of tables) {
    const { rows } = await railway.query(`SELECT COUNT(*) FROM ${table}`);
    console.log(`  ${table}: ${rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
  }

} catch (error) {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  console.error(error.stack);
  process.exit(1);
} finally {
  await railway.end();
  console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç –ë–î');
}
