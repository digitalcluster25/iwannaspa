import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
)

const spaId = 'e68aea4d-aff1-4b14-812c-65bdc11eb8a9'

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–æ–±—Å—Ç–≤ –¥–ª—è –°–ü–ê:', spaId)
console.log('')

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –°–ü–ê
const { data: spa, error: spaError } = await supabase
  .from('spas')
  .select('id, name')
  .eq('id', spaId)
  .single()

if (spaError) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –°–ü–ê:', spaError.message)
  process.exit(1)
}

console.log('‚úÖ –°–ü–ê –Ω–∞–π–¥–µ–Ω:', spa.name)
console.log('')

// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ spa_amenities
console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã spa_amenities:')
const { data: spaAmenities, error: amenitiesError } = await supabase
  .from('spa_amenities')
  .select('*')
  .eq('spa_id', spaId)

if (amenitiesError) {
  console.error('‚ùå –û—à–∏–±–∫–∞:', amenitiesError.message)
} else {
  console.log(`   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${spaAmenities.length}`)
  if (spaAmenities.length > 0) {
    console.log('   –î–∞–Ω–Ω—ã–µ:', JSON.stringify(spaAmenities, null, 2))
  } else {
    console.log('   ‚ö†Ô∏è  –ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç - —É–¥–æ–±—Å—Ç–≤–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')
  }
}
console.log('')

// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É–¥–æ–±—Å—Ç–≤–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
console.log('üìö –í—Å–µ —É–¥–æ–±—Å—Ç–≤–∞ –≤ —Å–∏—Å—Ç–µ–º–µ:')
const { data: allAmenities } = await supabase
  .from('amenities')
  .select('*')
  .eq('active', true)

if (allAmenities && allAmenities.length > 0) {
  console.log(`   –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${allAmenities.length}`)
  allAmenities.slice(0, 5).forEach(a => {
    console.log(`   - ${a.name} (ID: ${a.id})`)
  })
  if (allAmenities.length > 5) {
    console.log(`   ... –∏ –µ—â–µ ${allAmenities.length - 5}`)
  }
} else {
  console.log('   ‚ùå –£–¥–æ–±—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!')
}
console.log('')

// 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
console.log('üîó –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–∫–∞–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏):')
const { data: fullData, error: fullError } = await supabase
  .from('spas')
  .select(`
    id,
    name,
    amenities:spa_amenities(
      amenity:amenities(*)
    )
  `)
  .eq('id', spaId)
  .single()

if (fullError) {
  console.error('‚ùå –û—à–∏–±–∫–∞:', fullError.message)
} else {
  console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç:')
  console.log(JSON.stringify(fullData, null, 2))
}
