#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è PostgREST –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

import { Client } from 'pg';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Railway PostgreSQL
const railwayConfig = {
  host: 'switchback.proxy.rlwy.net',
  port: 44855,
  database: 'railway',
  user: 'postgres',
  password: 'piAlmgrclkSirLRLJfGwJizmKrIpKaXs',
  ssl: {
    rejectUnauthorized: false
  }
};

async function testPostgRESTConnection() {
  const client = new Client(railwayConfig);
  
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway PostgreSQL...');
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ web_anon
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è web_anon...');
    
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å web_anon
      await client.query('SET ROLE web_anon;');
      console.log('‚úÖ –†–æ–ª—å web_anon —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ö–µ–º–µ app
      const schemaResult = await client.query(`
        SELECT schema_name 
        FROM information_schema.schemata 
        WHERE schema_name = 'app'
      `);
      console.log('‚úÖ –°—Ö–µ–º–∞ app –¥–æ—Å—Ç—É–ø–Ω–∞:', schemaResult.rows.length > 0);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–∞–º
      const tablesResult = await client.query(`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'app'
        ORDER BY table_name
      `);
      console.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tablesResult.rows.length}`);
      tablesResult.rows.forEach(row => {
        console.log(`  - ${row.table_name}`);
      });
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º SELECT –∑–∞–ø—Ä–æ—Å
      const countriesResult = await client.query('SELECT COUNT(*) FROM app.countries');
      console.log(`‚úÖ SELECT –∏–∑ countries: ${countriesResult.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º SELECT —Å JOIN
      const spasResult = await client.query(`
        SELECT s.name, c.name as city_name 
        FROM app.spas s 
        LEFT JOIN app.cities c ON s.city_id = c.id 
        LIMIT 3
      `);
      console.log(`‚úÖ SELECT —Å JOIN: ${spasResult.rows.length} –∑–∞–ø–∏—Å–µ–π`);
      spasResult.rows.forEach(row => {
        console.log(`  - ${row.name} ‚Üí ${row.city_name || '–ë–µ–∑ –≥–æ—Ä–æ–¥–∞'}`);
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –æ—Ç –∏–º–µ–Ω–∏ web_anon:', error.message);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    console.log('\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...');
    
    try {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ postgres
      await client.query('RESET ROLE;');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ web_anon
      const grantsResult = await client.query(`
        SELECT 
          grantee, 
          table_name, 
          privilege_type 
        FROM information_schema.table_privileges 
        WHERE grantee = 'web_anon' 
        AND table_schema = 'app'
        ORDER BY table_name, privilege_type
      `);
      
      console.log(`‚úÖ –ü—Ä–∞–≤–∞ web_anon: ${grantsResult.rows.length} –∑–∞–ø–∏—Å–µ–π`);
      grantsResult.rows.forEach(row => {
        console.log(`  - ${row.table_name}: ${row.privilege_type}`);
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤:', error.message);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgREST –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  } finally {
    await client.end();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  testPostgRESTConnection().catch(console.error);
}

export { testPostgRESTConnection };
