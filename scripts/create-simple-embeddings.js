import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://ewkeuupfristqqonkcph.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV3a2V1dXBmcmlzdHFxb25rY3BoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg4NDI0MDQsImV4cCI6MjA3NDQxODQwNH0.YduF49boh1jK40-Lk1nbie9JVtF0AsPyn_08JC-HX6E'

const supabase = createClient(supabaseUrl, supabaseKey)

async function createSimpleEmbeddings() {
  try {
    console.log('üöÄ Creating simple test embeddings...')
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ (1536 –∏–∑–º–µ—Ä–µ–Ω–∏–π)
    const embeddings = [
      {
        spa_id: '550e8400-e29b-41d4-a716-446655440001',
        content: 'Luxury Wellness Resort –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –°–ü–ê-–∫—É—Ä–æ—Ä—Ç —Å –ø–æ–ª–Ω—ã–º —Å–ø–µ–∫—Ç—Ä–æ–º wellness —É—Å–ª—É–≥. –í–∫–ª—é—á–∞–µ—Ç –º–∞—Å—Å–∞–∂–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, —Ç–µ—Ä–º–∞–ª—å–Ω—ã–µ –≤–∞–Ω–Ω—ã, –π–æ–≥—É –∏ –º–µ–¥–∏—Ç–∞—Ü–∏—é. –ö–∏–µ–≤ –°–∞—É–Ω–∞ –ë–∞—Å—Å–µ–π–Ω –ô–æ–≥–∞ –†–µ—Å—Ç–æ—Ä–∞–Ω wellness relaxation',
        embedding: Array(1536).fill(0).map((_, i) => (i + 1) * 0.001).join(',')
      },
      {
        spa_id: '550e8400-e29b-41d4-a716-446655440002', 
        content: '–¢–µ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å "–ò—Å—Ç–æ—á–Ω–∏–∫" –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ—Ä–º–∞–ª—å–Ω—ã–π –°–ü–ê-–∫–æ–º–ø–ª–µ–∫—Å —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥–æ—Ä—è—á–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏ –ª–µ—á–µ–±–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏. –ë—É–∫–æ–≤–µ–ª—å –¢–µ—Ä–º–∞–ª—å–Ω—ã–µ –≤–∞–Ω–Ω—ã –ì—Ä—è–∑–µ–ª–µ—á–µ–Ω–∏–µ –°–∞—É–Ω–∞ thermal health',
        embedding: Array(1536).fill(0).map((_, i) => (i + 2) * 0.001).join(',')
      },
      {
        spa_id: '550e8400-e29b-41d4-a716-446655440003',
        content: 'Medical SPA Clinic –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –°–ü–ê-—Ü–µ–Ω—Ç—Ä —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∏ –æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏. –õ—å–≤–æ–≤ –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è –ú–∞—Å—Å–∞–∂ medical health',
        embedding: Array(1536).fill(0).map((_, i) => (i + 3) * 0.001).join(',')
      }
    ]
    
    for (const emb of embeddings) {
      const { error } = await supabase
        .from('spa_embeddings')
        .upsert({
          spa_id: emb.spa_id,
          content: emb.content,
          embedding: `[${emb.embedding}]`
        }, { onConflict: 'spa_id' })
      
      if (error) {
        console.error(`‚ùå Error creating embedding for ${emb.spa_id}:`, error)
      } else {
        console.log(`‚úÖ Embedding created for spa: ${emb.spa_id}`)
      }
    }
    
    console.log('‚úÖ All test embeddings created!')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    console.log('üîç Testing search...')
    const testEmbedding = Array(1536).fill(0).map((_, i) => (i + 1) * 0.001).join(',')
    
    const { data: results, error } = await supabase
      .rpc('search_spas', {
        query_embedding: `[${testEmbedding}]`,
        match_threshold: 0.1,
        match_count: 5
      })
    
    if (error) {
      console.error('‚ùå Search test error:', error)
    } else {
      console.log(`üîç Search returned ${results?.length || 0} results`)
      results?.forEach((result, i) => {
        console.log(`  ${i + 1}. Spa ID: ${result.spa_id}, Similarity: ${(result.similarity * 100).toFixed(1)}%`)
      })
    }
    
  } catch (error) {
    console.error('‚ùå Failed:', error)
  }
}

createSimpleEmbeddings()
