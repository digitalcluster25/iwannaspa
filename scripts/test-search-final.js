import { createClient } from '@supabase/supabase-js'
import OpenAI from 'openai'

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY
const openaiKey = process.env.VITE_OPENAI_API_KEY

if (!supabaseUrl || !supabaseKey || !openaiKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)
const openai = new OpenAI({
  apiKey: openaiKey,
  dangerouslyAllowBrowser: true
})

async function testSearch() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫...')
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ spas
  console.log('\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –°–ü–ê:')
  const { data: spas, error: spasError } = await supabase
    .from('spas')
    .select('id, name, location')
  
  if (spasError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –°–ü–ê:', spasError)
    return
  }
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${spas.length} –°–ü–ê:`)
  spas.forEach(spa => {
    console.log(`  - ${spa.name} (${spa.location}) - ID: ${spa.id}`)
  })
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º embeddings
  console.log('\nüß† –ü—Ä–æ–≤–µ—Ä—è–µ–º embeddings:')
  const { data: embeddings, error: embError } = await supabase
    .from('spa_embeddings')
    .select('spa_id, content')
  
  if (embError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ embeddings:', embError)
    return
  }
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${embeddings.length} embeddings:`)
  embeddings.forEach(emb => {
    console.log(`  - –°–ü–ê ID: ${emb.spa_id}`)
    console.log(`    –ö–æ–Ω—Ç–µ–Ω—Ç: ${emb.content.substring(0, 100)}...`)
  })
  
  // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
  console.log('\nüîé –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫:')
  const query = '—Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂ –≤ –ö–∏–µ–≤–µ'
  console.log(`–ó–∞–ø—Ä–æ—Å: "${query}"`)
  
  try {
    // –°–æ–∑–¥–∞–µ–º embedding –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const response = await openai.embeddings.create({
      model: "text-embedding-ada-002",
      input: query
    })
    
    const queryEmbedding = response.data[0].embedding
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω embedding –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (${queryEmbedding.length} –∏–∑–º–µ—Ä–µ–Ω–∏–π)`)
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    const { data: searchResults, error: searchError } = await supabase.rpc('search_spas', {
      query_embedding: queryEmbedding,
      match_threshold: 0.7,
      match_count: 5
    })
    
    if (searchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', searchError)
      return
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${searchResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:`)
    searchResults.forEach((result, index) => {
      console.log(`  ${index + 1}. –°–ü–ê ID: ${result.spa_id}`)
      console.log(`     –°—Ö–æ–∂–µ—Å—Ç—å: ${result.similarity.toFixed(3)}`)
      console.log(`     –ö–æ–Ω—Ç–µ–Ω—Ç: ${result.content.substring(0, 100)}...`)
    })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ embedding:', error)
  }
}

testSearch()
