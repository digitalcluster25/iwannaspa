import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY

const supabase = createClient(supabaseUrl, supabaseKey)

async function debugSearchFunction() {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞...')
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ embeddings
    const { data: embeddings, error: embError } = await supabase
      .from('spa_embeddings')
      .select('spa_id, content, embedding')
    
    if (embError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ embeddings:', embError)
      return
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${embeddings.length} embeddings`)
    
    if (embeddings.length === 0) {
      console.error('‚ùå –ù–µ—Ç embeddings –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
      return
    }
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π embedding
    const firstEmbedding = embeddings[0]
    console.log(`üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å embedding –°–ü–ê ID: ${firstEmbedding.spa_id}`)
    console.log(`üìù –ö–æ–Ω—Ç–µ–Ω—Ç: ${firstEmbedding.content.substring(0, 100)}...`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å embedding
    const embeddingArray = firstEmbedding.embedding
    console.log(`üìä –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å embedding: ${embeddingArray.length}`)
    
    if (embeddingArray.length !== 1536) {
      console.error(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å embedding: ${embeddingArray.length}, –æ–∂–∏–¥–∞–µ—Ç—Å—è 1536`)
      return
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —Ç–µ–º –∂–µ embedding (–¥–æ–ª–∂–Ω–æ –¥–∞—Ç—å —Å—Ö–æ–∂–µ—Å—Ç—å 1.0)
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —Ç–µ–º –∂–µ embedding:')
    const { data: sameSearch, error: sameError } = await supabase.rpc('search_spas', {
      query_embedding: embeddingArray,
      match_threshold: 0.5,
      match_count: 5
    })
    
    if (sameError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ search_spas:', sameError)
      return
    }
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ç–µ–º –∂–µ embedding: ${sameSearch.length}`)
    sameSearch.forEach((result, index) => {
      console.log(`  ${index + 1}. –°–ü–ê ID: ${result.spa_id}`)
      console.log(`     –°—Ö–æ–∂–µ—Å—Ç—å: ${result.similarity.toFixed(3)}`)
    })
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ—Ä–æ–≥–æ–º 0.0:')
    const { data: lowSearch, error: lowError } = await supabase.rpc('search_spas', {
      query_embedding: embeddingArray,
      match_threshold: 0.0,
      match_count: 5
    })
    
    if (lowError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ search_spas —Å –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º:', lowError)
      return
    }
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ—Ä–æ–≥–æ–º 0.0: ${lowSearch.length}`)
    lowSearch.forEach((result, index) => {
      console.log(`  ${index + 1}. –°–ü–ê ID: ${result.spa_id}`)
      console.log(`     –°—Ö–æ–∂–µ—Å—Ç—å: ${result.similarity.toFixed(3)}`)
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã:')
    const { data: indexInfo, error: indexError } = await supabase
      .from('pg_indexes')
      .select('*')
      .eq('tablename', 'spa_embeddings')
    
    if (indexError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–¥–µ–∫—Å–∞—Ö:', indexError.message)
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${indexInfo.length} –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è spa_embeddings`)
      indexInfo.forEach(index => {
        console.log(`  - ${index.indexname}: ${index.indexdef}`)
      })
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  }
}

debugSearchFunction()
