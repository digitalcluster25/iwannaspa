import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://ewkeuupfristqqonkcph.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV3a2V1dXBmcmlzdHFxb25rY3BoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg4NDI0MDQsImV4cCI6MjA3NDQxODQwNH0.YduF49boh1jK40-Lk1nbie9JVtF0AsPyn_08JC-HX6E'

const supabase = createClient(supabaseUrl, supabaseKey)

const mockCities = [
  { name: '–ö–∏–µ–≤', active: true },
  { name: '–û–¥–µ—Å—Å–∞', active: true },
  { name: '–õ—å–≤–æ–≤', active: true },
  { name: '–•–∞—Ä—å–∫–æ–≤', active: true },
  { name: '–î–Ω–µ–ø—Ä', active: true },
]

const mockCategories = [
  { name: 'Wellness', value: 'wellness', active: true },
  { name: 'Medical', value: 'medical', active: true },
  { name: 'Luxury', value: 'luxury', active: true },
  { name: 'Family', value: 'family', active: true },
]

const mockPurposes = [
  { name: '–†–µ–ª–∞–∫—Å–∞—Ü–∏—è', value: 'relaxation', active: true },
  { name: '–õ–µ—á–µ–Ω–∏–µ', value: 'treatment', active: true },
  { name: '–î–µ—Ç–æ–∫—Å', value: 'detox', active: true },
  { name: '–°–ø–æ—Ä—Ç', value: 'sport', active: true },
]

const mockAmenities = [
  { name: '–ë–∞—Å—Å–µ–π–Ω', active: true },
  { name: '–°–∞—É–Ω–∞', active: true },
  { name: '–•–∞–º–∞–º', active: true },
  { name: '–î–∂–∞–∫—É–∑–∏', active: true },
  { name: '–§–∏—Ç–Ω–µ—Å-–∑–∞–ª', active: true },
  { name: '–ú–∞—Å—Å–∞–∂–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã', active: true },
  { name: '–ü–∞—Ä–∫–æ–≤–∫–∞', active: true },
  { name: 'Wi-Fi', active: true },
  { name: '–†–µ—Å—Ç–æ—Ä–∞–Ω', active: true },
  { name: '–ë–∞—Ä', active: true },
]

const mockServiceTemplates = [
  { name: '–ú–∞—Å—Å–∞–∂', active: true },
  { name: '–û–±–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ', active: true },
  { name: '–ü–∏–ª–∏–Ω–≥', active: true },
  { name: '–ú–∞—Å–∫–∞ –¥–ª—è –ª–∏—Ü–∞', active: true },
  { name: '–ú–∞–Ω–∏–∫—é—Ä', active: true },
  { name: '–ü–µ–¥–∏–∫—é—Ä', active: true },
  { name: '–°—Ç—Ä–∏–∂–∫–∞', active: true },
  { name: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ', active: true },
]

const mockSpas = [
  {
    name: 'Luxury Wellness Resort',
    description: '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π wellness-–∫–æ–º–ø–ª–µ–∫—Å —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º',
    location: '–ö–∏–µ–≤',
    category: 'luxury',
    purpose: 'relaxation',
    price: 3500,
    rating: 4.9,
    reviewCount: 248,
    images: [
      'https://images.unsplash.com/photo-1540555700478-4be289fbecef',
      'https://images.unsplash.com/photo-1571902943202-507ec2618e8f'
    ],
    amenities: ['–ë–∞—Å—Å–µ–π–Ω', '–°–∞—É–Ω–∞', '–î–∂–∞–∫—É–∑–∏', '–§–∏—Ç–Ω–µ—Å-–∑–∞–ª', '–†–µ—Å—Ç–æ—Ä–∞–Ω', '–ü–∞—Ä–∫–æ–≤–∫–∞', 'Wi-Fi'],
    services: [
      { name: '–ú–∞—Å—Å–∞–∂', description: '–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂ –≤—Å–µ–≥–æ —Ç–µ–ª–∞', price: 1200, image: 'https://images.unsplash.com/photo-1544161515-4ab6ce6db874' },
      { name: '–û–±–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ', description: '–î–µ—Ç–æ–∫—Å –æ–±–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ', price: 900, image: 'https://images.unsplash.com/photo-1596178060671-7a80dc8059ea' }
    ],
    contactInfo: {
      phone: '+380 44 123 45 67',
      email: 'info@luxuryspa.ua',
      workingHours: '–ü–Ω-–í—Å 9:00 - 22:00',
      whatsapp: '+380 44 123 45 67',
      telegram: '@luxuryspa'
    },
    featured: true,
    active: true,
    createdAt: new Date().toISOString()
  },
  {
    name: 'Medical SPA Clinic',
    description: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –°–ü–ê-—Ü–µ–Ω—Ç—Ä —Å –ª–µ—á–µ–±–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏',
    location: '–û–¥–µ—Å—Å–∞',
    category: 'medical',
    purpose: 'treatment',
    price: 2800,
    rating: 4.8,
    reviewCount: 189,
    images: [
      'https://images.unsplash.com/photo-1519823551278-64ac92734fb1',
      'https://images.unsplash.com/photo-1591343395902-73524b7b2e19'
    ],
    amenities: ['–ë–∞—Å—Å–µ–π–Ω', '–°–∞—É–Ω–∞', '–ú–∞—Å—Å–∞–∂–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã', '–ü–∞—Ä–∫–æ–≤–∫–∞', 'Wi-Fi'],
    services: [
      { name: '–õ–µ—á–µ–±–Ω—ã–π –º–∞—Å—Å–∞–∂', description: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –º–∞—Å—Å–∞–∂', price: 1500, image: 'https://images.unsplash.com/photo-1519823551278-64ac92734fb1' }
    ],
    contactInfo: {
      phone: '+380 48 765 43 21',
      email: 'info@medicalspa.ua',
      workingHours: '–ü–Ω-–ü—Ç 8:00 - 20:00',
    },
    featured: true,
    active: true,
    createdAt: new Date().toISOString()
  }
]

async function migrate() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ Supabase...\n')

  try {
    // 1. –ì–æ—Ä–æ–¥–∞
    console.log('üìç –ú–∏–≥—Ä–∞—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤...')
    for (const city of mockCities) {
      const { error } = await supabase
        .from('cities')
        .upsert(city, { onConflict: 'name' })
      
      if (!error) console.log(`  ‚úÖ ${city.name}`)
      else console.error(`  ‚ùå ${city.name}:`, error.message)
    }

    // 2. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('\nüìÇ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π...')
    for (const cat of mockCategories) {
      const { error } = await supabase
        .from('categories')
        .upsert({ ...cat, label: cat.name }, { onConflict: 'value' })
      
      if (!error) console.log(`  ‚úÖ ${cat.name}`)
      else console.error(`  ‚ùå ${cat.name}:`, error.message)
    }

    // 3. –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è
    console.log('\nüéØ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π...')
    for (const purpose of mockPurposes) {
      const { error } = await supabase
        .from('purposes')
        .upsert({ ...purpose, label: purpose.name }, { onConflict: 'value' })
      
      if (!error) console.log(`  ‚úÖ ${purpose.name}`)
      else console.error(`  ‚ùå ${purpose.name}:`, error.message)
    }

    // 4. –£–¥–æ–±—Å—Ç–≤–∞
    console.log('\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è —É–¥–æ–±—Å—Ç–≤...')
    for (const amenity of mockAmenities) {
      const { error } = await supabase
        .from('amenities')
        .upsert(amenity, { onConflict: 'name' })
      
      if (!error) console.log(`  ‚úÖ ${amenity.name}`)
      else console.error(`  ‚ùå ${amenity.name}:`, error.message)
    }

    // 5. –®–∞–±–ª–æ–Ω—ã —É—Å–ª—É–≥
    console.log('\nüõ†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —É—Å–ª—É–≥...')
    for (const service of mockServiceTemplates) {
      const { error } = await supabase
        .from('service_templates')
        .upsert(service, { onConflict: 'name' })
      
      if (!error) console.log(`  ‚úÖ ${service.name}`)
      else console.error(`  ‚ùå ${service.name}:`, error.message)
    }

    // –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è —Å–≤—è–∑–µ–π
    const { data: cities } = await supabase.from('cities').select('id, name')
    const cityMap = new Map(cities?.map(c => [c.name, c.id]) || [])

    const { data: amenities } = await supabase.from('amenities').select('id, name')
    const amenityMap = new Map(amenities?.map(a => [a.name, a.id]) || [])

    // 6. –°–ü–ê
    console.log('\nüè® –ú–∏–≥—Ä–∞—Ü–∏—è –°–ü–ê –∫–æ–º–ø–ª–µ–∫—Å–æ–≤...')
    for (const spa of mockSpas) {
      const { data: spaData, error: spaError } = await supabase
        .from('spas')
        .insert({
          name: spa.name,
          description: spa.description,
          price: spa.price,
          rating: spa.rating,
          review_count: spa.reviewCount,
          location: spa.location,
          city_id: cityMap.get(spa.location),
          images: spa.images,
          category: spa.category,
          purpose: spa.purpose,
          featured: spa.featured,
          active: spa.active,
          created_at: spa.createdAt
        })
        .select()
        .single()
      
      if (spaError) {
        console.error(`  ‚ùå ${spa.name}:`, spaError.message)
        continue
      }

      console.log(`  ‚úÖ ${spa.name}`)

      // –£—Å–ª—É–≥–∏
      if (spa.services?.length > 0) {
        await supabase.from('spa_services').insert(
          spa.services.map(s => ({
            spa_id: spaData.id,
            name: s.name,
            description: s.description,
            price: s.price,
            image: s.image
          }))
        )
        console.log(`    ‚úÖ –£—Å–ª—É–≥–∏: ${spa.services.length}`)
      }

      // –£–¥–æ–±—Å—Ç–≤–∞
      if (spa.amenities?.length > 0) {
        const amenityIds = spa.amenities.map(name => amenityMap.get(name)).filter(Boolean)
        if (amenityIds.length > 0) {
          await supabase.from('spa_amenities').insert(
            amenityIds.map(id => ({ spa_id: spaData.id, amenity_id: id }))
          )
          console.log(`    ‚úÖ –£–¥–æ–±—Å—Ç–≤–∞: ${amenityIds.length}`)
        }
      }

      // –ö–æ–Ω—Ç–∞–∫—Ç—ã
      if (spa.contactInfo) {
        await supabase.from('spa_contacts').insert({
          spa_id: spaData.id,
          phone: spa.contactInfo.phone,
          email: spa.contactInfo.email,
          working_hours: spa.contactInfo.workingHours,
          whatsapp: spa.contactInfo.whatsapp,
          telegram: spa.contactInfo.telegram
        })
        console.log(`    ‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã`)
      }
    }

    console.log('\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    console.log(`  ‚Ä¢ –ì–æ—Ä–æ–¥–æ–≤: ${mockCities.length}`)
    console.log(`  ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${mockCategories.length}`)
    console.log(`  ‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–π: ${mockPurposes.length}`)
    console.log(`  ‚Ä¢ –£–¥–æ–±—Å—Ç–≤: ${mockAmenities.length}`)
    console.log(`  ‚Ä¢ –£—Å–ª—É–≥: ${mockServiceTemplates.length}`)
    console.log(`  ‚Ä¢ –°–ü–ê: ${mockSpas.length}`)

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error)
    process.exit(1)
  }
}

migrate()
