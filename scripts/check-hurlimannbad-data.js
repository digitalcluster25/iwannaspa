// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö H√ºrlimannbad & Spa Zurich
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://ewkeuupfristqqonkcph.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV3a2V1dXBmcmlzdHFxb25rY3BoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg4NDI0MDQsImV4cCI6MjA3NDQxODQwNH0.YduF49boh1jK40-Lk1nbie9JVtF0AsPyn_08JC-HX6E'

const supabase = createClient(supabaseUrl, supabaseKey)

async function checkHurlimannbadData() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ H√ºrlimannbad & Spa Zurich...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –°–ü–ê
    const { data: spa, error: spaError } = await supabase
      .from('spas')
      .select(`
        *,
        city:cities(*)
      `)
      .ilike('name', '%—Ö—é—Ä–ª–∏–º–∞–Ω–Ω–±–∞–¥%')
      .single()

    if (spaError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –°–ü–ê:', spaError)
      return
    }

    console.log('\nüìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –°–ü–ê:')
    console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${spa.name}`)
    console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${spa.description.substring(0, 100)}...`)
    console.log(`  –¶–µ–Ω–∞: ${spa.price} –≥—Ä–Ω`)
    console.log(`  –†–µ–π—Ç–∏–Ω–≥: ${spa.rating}/5`)
    console.log(`  –ê–¥—Ä–µ—Å: ${spa.address}`)
    console.log(`  –ì–æ—Ä–æ–¥: ${spa.city?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}`)
    console.log(`  –†–∞–π–æ–Ω: ${spa.city?.district || '–ù–µ —É–∫–∞–∑–∞–Ω'}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª—É–≥–∏
    const { data: services, error: servicesError } = await supabase
      .from('spa_services')
      .select('*')
      .eq('spa_id', spa.id)
      .order('price')

    if (servicesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥:', servicesError)
    } else {
      console.log('\nüõ†Ô∏è –£—Å–ª—É–≥–∏ –°–ü–ê:')
      services.forEach((service, index) => {
        console.log(`  ${index + 1}. ${service.name}`)
        console.log(`     –¶–µ–Ω–∞: ${service.price} –≥—Ä–Ω`)
        console.log(`     –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${service.duration} –º–∏–Ω`)
        console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: ${service.description.substring(0, 80)}...`)
        console.log('')
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
    const { data: contact, error: contactError } = await supabase
      .from('spa_contacts')
      .select('*')
      .eq('spa_id', spa.id)
      .single()

    if (contactError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', contactError)
    } else {
      console.log('üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:')
      console.log(`  –¢–µ–ª–µ—Ñ–æ–Ω: ${contact.phone}`)
      console.log(`  Email: ${contact.email}`)
      console.log(`  –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: ${contact.working_hours}`)
      console.log(`  –°–∞–π—Ç: ${contact.website}`)
    }

    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')

  } catch (error) {
    console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

checkHurlimannbadData()
