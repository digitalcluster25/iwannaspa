// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å —Å—Ç—Ä–∞–Ω–∞–º–∏
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://ewkeuupfristqqonkcph.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV3a2V1dXBmcmlzdHFxb25rY3BoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg4NDI0MDQsImV4cCI6MjA3NDQxODQwNH0.YduF49boh1jK40-Lk1nbie9JVtF0AsPyn_08JC-HX6E'

const supabase = createClient(supabaseUrl, supabaseKey)

async function testCountries() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω—ã
    const { data: countries, error: fetchError } = await supabase
      .from('countries')
      .select('*')

    if (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω:', fetchError)
      return
    }

    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω: ${countries?.length || 0}`)
    
    if (countries && countries.length > 0) {
      console.log('üåç –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω—ã:')
      countries.forEach(country => {
        console.log(`  - ${country.name} (${country.code}) - ${country.active ? '–∞–∫—Ç–∏–≤–Ω–∞' : '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'}`)
      })
    } else {
      console.log('‚ö†Ô∏è –°—Ç—Ä–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é...')
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω—É
      const { data: newCountry, error: createError } = await supabase
        .from('countries')
        .insert({
          name: '–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∞',
          code: 'TS',
          active: true
        })
        .select()
        .single()

      if (createError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã:', createError)
      } else {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞:', newCountry)
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–æ–¥–∞
    console.log('\nüèôÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–æ–¥–∞...')
    const { data: cities, error: citiesError } = await supabase
      .from('cities')
      .select(`
        *,
        country:countries(*)
      `)

    if (citiesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ—Ä–æ–¥–æ–≤:', citiesError)
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: ${cities?.length || 0}`)
      if (cities && cities.length > 0) {
        cities.forEach(city => {
          console.log(`  - ${city.name}${city.country ? ` (${city.country.name})` : ' (–±–µ–∑ —Å—Ç—Ä–∞–Ω—ã)'}`)
        })
      }
    }

  } catch (error) {
    console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

testCountries()




