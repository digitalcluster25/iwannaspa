import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase variables')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function runMigration() {
  try {
    console.log('üöÄ Starting migration...')

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç—Ä–∞–Ω
    console.log('üìã Creating countries table...')
    const { error: countriesError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS countries (
          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
          name TEXT NOT NULL UNIQUE,
          code TEXT NOT NULL UNIQUE,
          active BOOLEAN DEFAULT true,
          created_at TIMESTAMPTZ DEFAULT NOW()
        );
      `
    })

    if (countriesError) {
      console.error('‚ùå Error creating countries table:', countriesError)
    } else {
      console.log('‚úÖ Countries table created')
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ country_id –≤ cities
    console.log('üîó Adding country_id to cities...')
    const { error: alterError } = await supabase.rpc('exec_sql', {
      sql: `
        ALTER TABLE cities ADD COLUMN IF NOT EXISTS country_id UUID REFERENCES countries(id) ON DELETE SET NULL;
      `
    })

    if (alterError) {
      console.error('‚ùå Error adding country_id column:', alterError)
    } else {
      console.log('‚úÖ country_id column added to cities')
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—ã
    console.log('üåç Adding countries...')
    const countries = [
      { name: '–®–≤–µ–π—Ü–∞—Ä–∏—è', code: 'CH' },
      { name: '–ò—Å–ø–∞–Ω–∏—è', code: 'ES' },
      { name: '–°–®–ê', code: 'US' }
    ]

    for (const country of countries) {
      const { error: insertError } = await supabase
        .from('countries')
        .upsert(country, { onConflict: 'name' })

      if (insertError) {
        console.error(`‚ùå Error inserting ${country.name}:`, insertError)
      } else {
        console.log(`‚úÖ Added country: ${country.name}`)
      }
    }

    // –í–∫–ª—é—á–∞–µ–º RLS
    console.log('üîí Enabling RLS for countries...')
    const { error: rlsError } = await supabase.rpc('exec_sql', {
      sql: `
        ALTER TABLE countries ENABLE ROW LEVEL SECURITY;
        
        CREATE POLICY IF NOT EXISTS "Enable read access for all users" ON countries FOR SELECT USING (true);
        CREATE POLICY IF NOT EXISTS "Enable insert for all users" ON countries FOR INSERT WITH CHECK (true);
        CREATE POLICY IF NOT EXISTS "Enable update for all users" ON countries FOR UPDATE USING (true);
        CREATE POLICY IF NOT EXISTS "Enable delete for all users" ON countries FOR DELETE USING (true);
      `
    })

    if (rlsError) {
      console.error('‚ùå Error setting up RLS:', rlsError)
    } else {
      console.log('‚úÖ RLS policies created')
    }

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
    console.log('üìä Creating index...')
    const { error: indexError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE INDEX IF NOT EXISTS idx_cities_country ON cities(country_id);
      `
    })

    if (indexError) {
      console.error('‚ùå Error creating index:', indexError)
    } else {
      console.log('‚úÖ Index created')
    }

    console.log('üéâ Migration completed successfully!')

  } catch (error) {
    console.error('üí• Migration failed:', error)
    process.exit(1)
  }
}

runMigration()


