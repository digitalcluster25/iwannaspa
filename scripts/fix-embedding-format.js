import { createClient } from '@supabase/supabase-js'
import OpenAI from 'openai'

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY
const openaiKey = process.env.VITE_OPENAI_API_KEY

const supabase = createClient(supabaseUrl, supabaseKey)
const openai = new OpenAI({
  apiKey: openaiKey,
  dangerouslyAllowBrowser: true
})

async function fixEmbeddingFormat() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç embedding...')
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –°–ü–ê –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ embedding
    const { data: spas, error: spasError } = await supabase
      .from('spas')
      .select('id, name, description, location, amenities, category, purpose')
      .limit(1)
    
    if (spasError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –°–ü–ê:', spasError)
      return
    }
    
    const spa = spas[0]
    console.log(`‚úÖ –†–∞–±–æ—Ç–∞–µ–º —Å–æ –°–ü–ê: ${spa.name}`)
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è embedding
    const content = `${spa.name} ${spa.description} ${spa.location} ${spa.amenities.join(' ')} ${spa.category} ${spa.purpose}`
    console.log(`üìù –ö–æ–Ω—Ç–µ–Ω—Ç: ${content}`)
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π embedding
    const response = await openai.embeddings.create({
      model: "text-embedding-ada-002",
      input: content
    })
    
    const embedding = response.data[0].embedding
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π embedding (${embedding.length} –∏–∑–º–µ—Ä–µ–Ω–∏–π)`)
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ embeddings
    await supabase
      .from('spa_embeddings')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000') // —É–¥–∞–ª—è–µ–º –≤—Å–µ
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π embedding
    const { data: insertData, error: insertError } = await supabase
      .from('spa_embeddings')
      .insert({
        spa_id: spa.id,
        content: content,
        embedding: embedding // –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É
      })
    
    if (insertError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ embedding:', insertError)
      return
    }
    
    console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π embedding —Å–æ–∑–¥–∞–Ω!')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
    const { data: checkEmbedding, error: checkError } = await supabase
      .from('spa_embeddings')
      .select('spa_id, content, embedding')
      .single()
    
    if (checkError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ embedding:', checkError)
      return
    }
    
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: embedding –∏–º–µ–µ—Ç ${checkEmbedding.embedding.length} –∏–∑–º–µ—Ä–µ–Ω–∏–π`)
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    console.log('\nüîé –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫:')
    const query = '—Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂ –≤ –ö–∏–µ–≤–µ'
    
    const queryResponse = await openai.embeddings.create({
      model: "text-embedding-ada-002",
      input: query
    })
    
    const queryEmbedding = queryResponse.data[0].embedding
    
    const { data: searchResults, error: searchError } = await supabase.rpc('search_spas', {
      query_embedding: queryEmbedding,
      match_threshold: 0.5,
      match_count: 5
    })
    
    if (searchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', searchError)
      return
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${searchResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:`)
    searchResults.forEach((result, index) => {
      console.log(`  ${index + 1}. –°–ü–ê ID: ${result.spa_id}`)
      console.log(`     –°—Ö–æ–∂–µ—Å—Ç—å: ${result.similarity.toFixed(3)}`)
      console.log(`     –ö–æ–Ω—Ç–µ–Ω—Ç: ${result.content.substring(0, 100)}...`)
    })
    
    if (searchResults.length > 0) {
      console.log('\nüéâ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç!')
    } else {
      console.log('\n‚ö†Ô∏è –ü–æ–∏—Å–∫ –Ω–µ –¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∏–∑–∏—Ç—å –ø–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏')
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  }
}

fixEmbeddingFormat()
