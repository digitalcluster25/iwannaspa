import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY

const supabase = createClient(supabaseUrl, supabaseKey)

async function checkCurrentState() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...')
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –°–ü–ê
    const { data: spas, error: spasError } = await supabase
      .from('spas')
      .select('id, name, location, amenities')
    
    if (spasError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –°–ü–ê:', spasError)
      return
    }
    
    console.log(`‚úÖ –°–ü–ê (${spas.length}):`)
    spas.forEach(spa => {
      console.log(`  - ${spa.name} (${spa.location})`)
      console.log(`    –£—Å–ª—É–≥–∏: ${spa.amenities.join(', ')}`)
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º embeddings
    const { data: embeddings, error: embError } = await supabase
      .from('spa_embeddings')
      .select('spa_id, content, embedding')
    
    if (embError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ embeddings:', embError)
      return
    }
    
    console.log(`\nüß† Embeddings (${embeddings.length}):`)
    embeddings.forEach(emb => {
      console.log(`  - –°–ü–ê ID: ${emb.spa_id}`)
      console.log(`    –ö–æ–Ω—Ç–µ–Ω—Ç: ${emb.content}`)
      console.log(`    –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: ${emb.embedding.length}`)
    })
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    console.log('\nüîé –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫:')
    
    const queries = [
      '–º–∞—Å—Å–∞–∂',
      '–ö–∏–µ–≤',
      '—Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂',
      'wellness',
      '—Å–∞—É–Ω–∞'
    ]
    
    for (const query of queries) {
      console.log(`\nüìù –ó–∞–ø—Ä–æ—Å: "${query}"`)
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä
      const testVector = Array(1536).fill(0.1)
      
      const { data: results, error: searchError } = await supabase.rpc('search_spas', {
        query_embedding: testVector,
        match_threshold: 0.0, // –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥
        match_count: 5
      })
      
      if (searchError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:`, searchError)
      } else {
        console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`)
        results.forEach((result, index) => {
          console.log(`  ${index + 1}. –°—Ö–æ–∂–µ—Å—Ç—å: ${result.similarity.toFixed(3)}`)
        })
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  }
}

checkCurrentState()
