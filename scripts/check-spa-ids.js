import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è VITE_SUPABASE_URL –∏–ª–∏ VITE_SUPABASE_ANON_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function checkSpaIds() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –≤ —Ç–∞–±–ª–∏—Ü–µ spas...')
  
  const { data: spas, error } = await supabase
    .from('spas')
    .select('id, name')
  
  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
    return
  }
  
  console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –°–ü–ê:')
  spas.forEach(spa => {
    console.log(`  - ID: ${spa.id}`)
    console.log(`    –ù–∞–∑–≤–∞–Ω–∏–µ: ${spa.name}`)
    console.log('')
  })
  
  if (spas.length === 0) {
    console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ spas –ø—É—Å—Ç–∞!')
  }
}

checkSpaIds()
