// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã countries
import { createClient } from '@supabase/supabase-js'

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase')
  console.log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env –µ—Å—Ç—å:')
  console.log('VITE_SUPABASE_URL=your_supabase_url')
  console.log('VITE_SUPABASE_ANON_KEY=your_supabase_anon_key')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function checkAndCreateCountriesTable() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ countries
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .eq('table_name', 'countries')

    if (tablesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü:', tablesError)
      return
    }

    if (tables && tables.length > 0) {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ countries —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
      const { data: countries, error: countriesError } = await supabase
        .from('countries')
        .select('*')

      if (countriesError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω:', countriesError)
        return
      }

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω: ${countries?.length || 0}`)
      if (countries && countries.length > 0) {
        console.log('üåç –°—Ç—Ä–∞–Ω—ã:', countries.map(c => `${c.name} (${c.code})`).join(', '))
      }
    } else {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ countries –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      console.log('üìã –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ MIGRATION_INSTRUCTIONS.md')
    }

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error)
  }
}

checkAndCreateCountriesTable()





