import { createClient } from '@supabase/supabase-js'
import OpenAI from 'openai'

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY
const openaiKey = process.env.VITE_OPENAI_API_KEY

const supabase = createClient(supabaseUrl, supabaseKey)
const openai = new OpenAI({
  apiKey: openaiKey,
  dangerouslyAllowBrowser: true
})

async function testSearchWithThresholds() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏ —Å—Ö–æ–∂–µ—Å—Ç–∏...')
  
  const query = '—Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂ –≤ –ö–∏–µ–≤–µ'
  console.log(`–ó–∞–ø—Ä–æ—Å: "${query}"`)
  
  try {
    // –°–æ–∑–¥–∞–µ–º embedding –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const response = await openai.embeddings.create({
      model: "text-embedding-ada-002",
      input: query
    })
    
    const queryEmbedding = response.data[0].embedding
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω embedding –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (${queryEmbedding.length} –∏–∑–º–µ—Ä–µ–Ω–∏–π)`)
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
    const thresholds = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]
    
    for (const threshold of thresholds) {
      console.log(`\nüìä –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏: ${threshold}`)
      
      const { data: searchResults, error: searchError } = await supabase.rpc('search_spas', {
        query_embedding: queryEmbedding,
        match_threshold: threshold,
        match_count: 5
      })
      
      if (searchError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å –ø–æ—Ä–æ–≥–æ–º ${threshold}:`, searchError)
        continue
      }
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${searchResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:`)
      searchResults.forEach((result, index) => {
        console.log(`  ${index + 1}. –°–ü–ê ID: ${result.spa_id}`)
        console.log(`     –°—Ö–æ–∂–µ—Å—Ç—å: ${result.similarity.toFixed(3)}`)
        console.log(`     –ö–æ–Ω—Ç–µ–Ω—Ç: ${result.content.substring(0, 80)}...`)
      })
      
      if (searchResults.length > 0) {
        console.log(`\nüéØ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π –ø–æ—Ä–æ–≥: ${threshold}`)
        break
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ embedding:', error)
  }
}

testSearchWithThresholds()
