import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY

const supabase = createClient(supabaseUrl, supabaseKey)

async function testAfterSQL() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ SQL...')
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º embeddings
    const { data: embeddings, error: embError } = await supabase
      .from('spa_embeddings')
      .select('spa_id, content, embedding')
    
    if (embError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ embeddings:', embError)
      return
    }
    
    console.log(`‚úÖ Embeddings (${embeddings.length}):`)
    embeddings.forEach(emb => {
      console.log(`  - –°–ü–ê ID: ${emb.spa_id}`)
      console.log(`    –ö–æ–Ω—Ç–µ–Ω—Ç: ${emb.content}`)
      console.log(`    –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: ${emb.embedding.length}`)
    })
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –Ω–∞–ø—Ä—è–º—É—é
    console.log('\nüîé –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é search_spas:')
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä —Ç–æ–π –∂–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
    const testVector = Array(1536).fill(0.1)
    
    const { data: searchResults, error: searchError } = await supabase.rpc('search_spas', {
      query_embedding: testVector,
      match_threshold: 0.0, // —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥
      match_count: 5
    })
    
    if (searchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ search_spas:', searchError)
      return
    }
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${searchResults.length}`)
    searchResults.forEach((result, index) => {
      console.log(`  ${index + 1}. –°–ü–ê ID: ${result.spa_id}`)
      console.log(`     –°—Ö–æ–∂–µ—Å—Ç—å: ${result.similarity.toFixed(3)}`)
      console.log(`     –ö–æ–Ω—Ç–µ–Ω—Ç: ${result.content.substring(0, 100)}...`)
    })
    
    if (searchResults.length === 0) {
      console.log('\n‚ùå –§—É–Ω–∫—Ü–∏—è search_spas –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã...')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–Ω–¥–µ–∫—Å—ã
      const { data: indexes, error: idxError } = await supabase
        .rpc('exec', { sql: "SELECT indexname, indexdef FROM pg_indexes WHERE tablename = 'spa_embeddings'" })
      
      if (idxError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã')
      } else {
        console.log('üìä –ò–Ω–¥–µ–∫—Å—ã:', indexes)
      }
    } else {
      console.log('\nüéâ –§—É–Ω–∫—Ü–∏—è search_spas —Ä–∞–±–æ—Ç–∞–µ—Ç!')
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  }
}

testAfterSQL()
