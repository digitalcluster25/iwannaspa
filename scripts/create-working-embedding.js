import { createClient } from '@supabase/supabase-js'
import OpenAI from 'openai'

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY
const openaiKey = process.env.VITE_OPENAI_API_KEY

const supabase = createClient(supabaseUrl, supabaseKey)
const openai = new OpenAI({
  apiKey: openaiKey,
  dangerouslyAllowBrowser: true
})

async function createWorkingEmbedding() {
  console.log('üîß –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π embedding...')
  
  try {
    // –ë–µ—Ä–µ–º –°–ü–ê –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ –ö–∏–µ–≤–µ
    const { data: spas, error: spasError } = await supabase
      .from('spas')
      .select('id, name, description, location, amenities, category, purpose')
      .eq('location', '–ö–∏–µ–≤')
      .limit(1)
    
    if (spasError || spas.length === 0) {
      console.error('‚ùå –°–ü–ê –≤ –ö–∏–µ–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    const spa = spas[0]
    console.log(`‚úÖ –†–∞–±–æ—Ç–∞–µ–º —Å–æ –°–ü–ê: ${spa.name}`)
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –º–∞—Å—Å–∞–∂–∞
    const content = `${spa.name} ${spa.description} –º–∞—Å—Å–∞–∂ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π ${spa.location} ${spa.amenities.join(' ')} ${spa.category} ${spa.purpose} –º–∞—Å—Å–∞–∂–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã`
    console.log(`üìù –ö–æ–Ω—Ç–µ–Ω—Ç: ${content}`)
    
    // –°–æ–∑–¥–∞–µ–º embedding —á–µ—Ä–µ–∑ OpenAI
    const response = await openai.embeddings.create({
      model: "text-embedding-ada-002",
      input: content
    })
    
    const embedding = response.data[0].embedding
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω embedding (${embedding.length} –∏–∑–º–µ—Ä–µ–Ω–∏–π)`)
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ embeddings
    const { error: deleteError } = await supabase
      .from('spa_embeddings')
      .delete()
      .neq('spa_id', '00000000-0000-0000-0000-000000000000')
    
    if (deleteError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', deleteError)
    }
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π embedding
    const { data: insertData, error: insertError } = await supabase
      .from('spa_embeddings')
      .insert({
        spa_id: spa.id,
        content: content,
        embedding: JSON.stringify(embedding) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON —Å—Ç—Ä–æ–∫—É
      })
    
    if (insertError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏:', insertError)
      return
    }
    
    console.log('‚úÖ Embedding —Å–æ–∑–¥–∞–Ω!')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
    const { data: checkData, error: checkError } = await supabase
      .from('spa_embeddings')
      .select('spa_id, content, embedding')
      .single()
    
    if (checkError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', checkError)
      return
    }
    
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: embedding –∏–º–µ–µ—Ç ${checkData.embedding.length} —Å–∏–º–≤–æ–ª–æ–≤`)
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    console.log('\nüîé –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ "–º–∞—Å—Å–∞–∂ –≤ –ö–∏–µ–≤–µ":')
    const query = '–º–∞—Å—Å–∞–∂ –≤ –ö–∏–µ–≤–µ'
    
    const queryResponse = await openai.embeddings.create({
      model: "text-embedding-ada-002",
      input: query
    })
    
    const queryEmbedding = queryResponse.data[0].embedding
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
    const thresholds = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]
    
    for (const threshold of thresholds) {
      console.log(`\nüìä –ü–æ—Ä–æ–≥: ${threshold}`)
      
      const { data: searchResults, error: searchError } = await supabase.rpc('search_spas', {
        query_embedding: queryEmbedding,
        match_threshold: threshold,
        match_count: 5
      })
      
      if (searchError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:`, searchError)
        break
      }
      
      console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${searchResults.length}`)
      if (searchResults.length > 0) {
        searchResults.forEach((result, index) => {
          console.log(`  ${index + 1}. –°—Ö–æ–∂–µ—Å—Ç—å: ${result.similarity.toFixed(3)}`)
          console.log(`     –ö–æ–Ω—Ç–µ–Ω—Ç: ${result.content.substring(0, 100)}...`)
        })
        console.log(`\nüéâ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ—Ä–æ–≥–æ–º ${threshold}!`)
        break
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  }
}

createWorkingEmbedding()
