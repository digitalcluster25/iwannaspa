import { createClient } from '@supabase/supabase-js'
import OpenAI from 'openai'

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY
const openaiKey = process.env.VITE_OPENAI_API_KEY

const supabase = createClient(supabaseUrl, supabaseKey)
const openai = new OpenAI({
  apiKey: openaiKey,
  dangerouslyAllowBrowser: true
})

async function testRealSearch() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫...')
  
  try {
    const queries = [
      '–º–∞—Å—Å–∞–∂ –≤ –ö–∏–µ–≤–µ',
      '—Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂',
      'wellness –≤ –ö–∏–µ–≤–µ',
      '—Å–∞—É–Ω–∞ –∏ –±–∞—Å—Å–µ–π–Ω'
    ]
    
    for (const query of queries) {
      console.log(`\nüìù –ó–∞–ø—Ä–æ—Å: "${query}"`)
      
      // –°–æ–∑–¥–∞–µ–º embedding –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const response = await openai.embeddings.create({
        model: "text-embedding-ada-002",
        input: query
      })
      
      const queryEmbedding = response.data[0].embedding
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω embedding (${queryEmbedding.length} –∏–∑–º–µ—Ä–µ–Ω–∏–π)`)
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
      const thresholds = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]
      
      for (const threshold of thresholds) {
        const { data: searchResults, error: searchError } = await supabase.rpc('search_spas', {
          query_embedding: queryEmbedding,
          match_threshold: threshold,
          match_count: 5
        })
        
        if (searchError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å –ø–æ—Ä–æ–≥–æ–º ${threshold}:`, searchError)
          break
        }
        
        if (searchResults.length > 0) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${searchResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ—Ä–æ–≥–æ–º ${threshold}:`)
          searchResults.forEach((result, index) => {
            console.log(`  ${index + 1}. –°—Ö–æ–∂–µ—Å—Ç—å: ${result.similarity.toFixed(3)}`)
            console.log(`     –ö–æ–Ω—Ç–µ–Ω—Ç: ${result.content.substring(0, 80)}...`)
          })
          break
        }
      }
    }
    
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç SemanticSearch...')
    console.log('–û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000/search –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–∏—Å–∫ –≤—Ä—É—á–Ω—É—é')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  }
}

testRealSearch()
