import { createClient } from '@supabase/supabase-js'
import OpenAI from 'openai'

const supabaseUrl = 'https://ewkeuupfristqqonkcph.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV3a2V1dXBmcmlzdHFxb25rY3BoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg4NDI0MDQsImV4cCI6MjA3NDQxODQwNH0.YduF49boh1jK40-Lk1nbie9JVtF0AsPyn_08JC-HX6E'
const openaiKey = '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'

const supabase = createClient(supabaseUrl, supabaseKey)
const openai = new OpenAI({ apiKey: openaiKey })

async function testSearch() {
  try {
    console.log('üîç Testing semantic search...')
    
    // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const query = '—Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂ –≤ –ö–∏–µ–≤–µ'
    const queryEmbedding = await openai.embeddings.create({
      model: "text-embedding-ada-002",
      input: query
    })
    
    console.log(`üìù Query: "${query}"`)
    console.log(`üìä Embedding dimension: ${queryEmbedding.data[0].embedding.length}`)
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    const { data: searchResults, error: searchError } = await supabase
      .rpc('search_spas', {
        query_embedding: `[${queryEmbedding.data[0].embedding.join(',')}]`,
        match_threshold: 0.1, // –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        match_count: 5
      })
    
    if (searchError) {
      console.error('‚ùå Error testing search:', searchError)
      
      // –ï—Å–ª–∏ –Ω–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ spas
      const { data: spas, error: spasError } = await supabase
        .from('spas')
        .select('*')
      
      if (!spasError && spas) {
        console.log(`üìä Available spas (${spas.length}):`)
        spas.forEach(spa => {
          console.log(`  - ${spa.name} (${spa.location}) - ${spa.category}`)
        })
      }
      
    } else {
      console.log(`üîç Search returned ${searchResults?.length || 0} results:`)
      searchResults?.forEach((result, index) => {
        console.log(`  ${index + 1}. Spa ID: ${result.spa_id}, Similarity: ${(result.similarity * 100).toFixed(1)}%`)
        console.log(`     Content: ${result.content.substring(0, 100)}...`)
      })
    }
    
  } catch (error) {
    console.error('‚ùå Test failed:', error)
  }
}

testSearch()
