import { useState } from 'react'
import { supabase } from '@/lib/supabase'
import { Button } from './ui/button'
import { Card, CardContent, CardHeader, CardTitle } from './ui/card'

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
 */
export function DebugPage() {
  const [loading, setLoading] = useState(false)
  const [result, setResult] = useState<any>(null)
  const [error, setError] = useState<string | null>(null)
  const [timing, setTiming] = useState<number>(0)
  const [testName, setTestName] = useState<string>('')

  // Wrapper —Å —Ç–∞–π–º–∞—É—Ç–æ–º
  const withTimeout = async <T,>(
    promise: Promise<T>,
    timeoutMs: number = 5000
  ): Promise<T> => {
    const timeoutPromise = new Promise<never>((_, reject) =>
      setTimeout(() => reject(new Error(`Timeout after ${timeoutMs}ms`)), timeoutMs)
    )
    return Promise.race([promise, timeoutPromise])
  }

  const testSimple = async () => {
    setTestName('–ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase client')
    setLoading(true)
    setError(null)
    setResult(null)
    
    try {
      const startTime = performance.now()
      
      // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω
      const client = supabase
      const hasClient = !!client
      const hasAuth = !!client.auth
      const hasFrom = typeof client.from === 'function'
      
      const endTime = performance.now()
      const duration = Math.round(endTime - startTime)
      
      setTiming(duration)
      setResult({
        clientExists: hasClient,
        authExists: hasAuth,
        fromExists: hasFrom,
        supabaseUrl: client.supabaseUrl,
      })
      
      console.log('‚úÖ Client check:', { hasClient, hasAuth, hasFrom })
    } catch (err: any) {
      console.error('‚ùå Exception:', err)
      setError(err.message)
    } finally {
      setLoading(false)
    }
  }

  const testAuth = async () => {
    setTestName('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
    setLoading(true)
    setError(null)
    setResult(null)
    
    try {
      const startTime = performance.now()
      
      const { data, error: authError } = await withTimeout(
        supabase.auth.getSession(),
        5000
      )
      
      const endTime = performance.now()
      const duration = Math.round(endTime - startTime)
      
      setTiming(duration)
      
      if (authError) {
        setError(authError.message)
      } else {
        setResult({
          hasSession: !!data.session,
          userId: data.session?.user?.id || '–Ω–µ—Ç',
          email: data.session?.user?.email || '–Ω–µ—Ç',
        })
      }
      
      console.log('‚úÖ Auth check:', data)
    } catch (err: any) {
      console.error('‚ùå Exception:', err)
      setError(err.message)
    } finally {
      setLoading(false)
    }
  }

  const testProfilesCount = async () => {
    setTestName('–ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ profiles')
    setLoading(true)
    setError(null)
    setResult(null)
    
    try {
      const startTime = performance.now()
      
      const { count, error: countError } = await withTimeout(
        supabase
          .from('profiles')
          .select('*', { count: 'exact', head: true }),
        5000
      )
      
      const endTime = performance.now()
      const duration = Math.round(endTime - startTime)
      
      setTiming(duration)
      
      if (countError) {
        setError(countError.message)
      } else {
        setResult({
          totalRecords: count,
          message: '–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        })
      }
      
      console.log('‚úÖ Count check:', count)
    } catch (err: any) {
      console.error('‚ùå Exception:', err)
      setError(err.message)
    } finally {
      setLoading(false)
    }
  }

  const testProfilesSimple = async () => {
    setTestName('–ó–∞–ø—Ä–æ—Å 1 –∑–∞–ø–∏—Å–∏ –∏–∑ profiles')
    setLoading(true)
    setError(null)
    setResult(null)
    
    try {
      const startTime = performance.now()
      
      const { data, error: queryError } = await withTimeout(
        supabase
          .from('profiles')
          .select('id, role')
          .limit(1)
          .single(),
        5000
      )
      
      const endTime = performance.now()
      const duration = Math.round(endTime - startTime)
      
      setTiming(duration)
      
      if (queryError) {
        setError(queryError.message)
      } else {
        setResult(data)
      }
      
      console.log('‚úÖ Query check:', data)
    } catch (err: any) {
      console.error('‚ùå Exception:', err)
      setError(err.message)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <Card className="max-w-2xl mx-auto">
        <CardHeader>
          <CardTitle>üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (—Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏)</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex flex-col gap-3">
            <Button
              onClick={testSimple}
              disabled={loading}
              variant="outline"
            >
              1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase client
            </Button>
            
            <Button
              onClick={testAuth}
              disabled={loading}
              variant="outline"
            >
              2. –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ç–∞–π–º–∞—É—Ç 5—Å)
            </Button>
            
            <Button
              onClick={testProfilesCount}
              disabled={loading}
              variant="outline"
            >
              3. –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π profiles (—Ç–∞–π–º–∞—É—Ç 5—Å)
            </Button>

            <Button
              onClick={testProfilesSimple}
              disabled={loading}
              variant="outline"
            >
              4. –ó–∞–ø—Ä–æ—Å 1 –∑–∞–ø–∏—Å–∏ profiles (—Ç–∞–π–º–∞—É—Ç 5—Å)
            </Button>
          </div>

          {loading && (
            <div className="bg-blue-50 border border-blue-200 rounded p-4">
              <p className="text-blue-700">‚è≥ {testName}...</p>
              <p className="text-sm text-blue-600 mt-1">
                –ú–∞–∫—Å. 5 —Å–µ–∫—É–Ω–¥, –ø–æ—Ç–æ–º —Ç–∞–π–º–∞—É—Ç
              </p>
            </div>
          )}

          {timing > 0 && !loading && (
            <div className={`border rounded p-4 ${
              timing < 500 ? 'bg-green-50 border-green-200' :
              timing < 2000 ? 'bg-yellow-50 border-yellow-200' :
              'bg-red-50 border-red-200'
            }`}>
              <p className={`font-bold ${
                timing < 500 ? 'text-green-700' :
                timing < 2000 ? 'text-yellow-700' :
                'text-red-700'
              }`}>
                ‚è±Ô∏è {timing}ms
              </p>
              <p className="text-sm mt-1">
                {timing < 500 && '‚úÖ –û—Ç–ª–∏—á–Ω–æ'}
                {timing >= 500 && timing < 2000 && '‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–æ'}
                {timing >= 2000 && 'üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ'}
              </p>
            </div>
          )}

          {error && (
            <div className="bg-red-50 border border-red-200 rounded p-4">
              <p className="text-red-700 font-bold">‚ùå –û—à–∏–±–∫–∞:</p>
              <pre className="text-sm mt-2 text-red-600 whitespace-pre-wrap">
                {error}
              </pre>
              {error.includes('Timeout') && (
                <p className="text-sm mt-2 text-red-600">
                  üí° –ó–∞–ø—Ä–æ—Å –∑–∞–≤–∏—Å –±–æ–ª–µ–µ 5 —Å–µ–∫—É–Ω–¥. –ü—Ä–æ–±–ª–µ–º–∞ —Å –ë–î –∏–ª–∏ —Å–µ—Ç—å—é.
                </p>
              )}
            </div>
          )}

          {result && !error && (
            <div className="bg-gray-50 border border-gray-200 rounded p-4">
              <p className="text-gray-700 font-bold mb-2">‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:</p>
              <pre className="text-sm text-gray-600 whitespace-pre-wrap overflow-auto max-h-64">
                {JSON.stringify(result, null, 2)}
              </pre>
            </div>
          )}

          <div className="bg-orange-50 border border-orange-200 rounded p-4 text-sm">
            <p className="font-bold text-orange-700 mb-2">‚ö†Ô∏è –í–∞–∂–Ω–æ:</p>
            <ul className="text-orange-600 space-y-1">
              <li>‚Ä¢ –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã 1-2 –ø—Ä–æ—Ö–æ–¥—è—Ç, –Ω–æ 3-4 —Ç–∞–π–º–∞—É—Ç—è—Ç—Å—è ‚Üí –ø—Ä–æ–±–ª–µ–º–∞ —Å RLS</li>
              <li>‚Ä¢ –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã —Ç–∞–π–º–∞—É—Ç—è—Ç—Å—è ‚Üí –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é/Supabase</li>
              <li>‚Ä¢ –û—Ç–∫—Ä–æ–π –∫–æ–Ω—Å–æ–ª—å (F12) –¥–ª—è –¥–µ—Ç–∞–ª–µ–π</li>
            </ul>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
