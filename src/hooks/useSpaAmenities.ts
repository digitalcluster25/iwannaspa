import { useState, useEffect } from 'react'
import { spaAmenitiesService, type SpaAmenityWithDetails } from '@/services/spaAmenitiesService'
import { useAmenities } from './useReferences'
import { toast } from 'sonner'

export function useSpaAmenities(spaId: string | undefined) {
  const [spaAmenities, setSpaAmenities] = useState<SpaAmenityWithDetails[]>([])
  const [loading, setLoading] = useState(!!spaId)
  const [error, setError] = useState<Error | null>(null)

  useEffect(() => {
    if (spaId) {
      loadSpaAmenities()
    }
  }, [spaId])

  const loadSpaAmenities = async () => {
    if (!spaId) return

    try {
      setLoading(true)
      setError(null)
      console.log('üîÑ Loading spa amenities for spa:', spaId)
      const data = await spaAmenitiesService.getBySpaId(spaId)
      console.log('‚úÖ Spa amenities loaded:', data.length)
      setSpaAmenities(data)
    } catch (err) {
      console.error('‚ùå Error loading spa amenities:', err)
      setError(err as Error)
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–¥–æ–±—Å—Ç–≤ –°–ü–ê')
    } finally {
      setLoading(false)
    }
  }

  const addAmenity = async (amenityId: string, customDescription?: string) => {
    if (!spaId) return

    try {
      console.log('‚ûï Adding amenity to spa:', { spaId, amenityId, customDescription })
      const newAmenity = await spaAmenitiesService.addAmenity(spaId, amenityId, customDescription)
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      await loadSpaAmenities()
      
      toast.success('–£–¥–æ–±—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
      return newAmenity
    } catch (err) {
      console.error('‚ùå Error adding amenity:', err)
      toast.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–¥–æ–±—Å—Ç–≤–∞')
      throw err
    }
  }

  const updateAmenity = async (amenityId: string, customDescription?: string) => {
    if (!spaId) return

    try {
      console.log('‚úèÔ∏è Updating amenity:', { spaId, amenityId, customDescription })
      const updatedAmenity = await spaAmenitiesService.updateAmenity(spaId, amenityId, customDescription)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setSpaAmenities(prev => 
        prev.map(amenity => 
          amenity.amenity_id === amenityId 
            ? { ...amenity, custom_description: customDescription }
            : amenity
        )
      )
      
      toast.success('–£–¥–æ–±—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
      return updatedAmenity
    } catch (err) {
      console.error('‚ùå Error updating amenity:', err)
      toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–¥–æ–±—Å—Ç–≤–∞')
      throw err
    }
  }

  const removeAmenity = async (amenityId: string) => {
    if (!spaId) return

    try {
      console.log('üóëÔ∏è Removing amenity from spa:', { spaId, amenityId })
      await spaAmenitiesService.removeAmenity(spaId, amenityId)
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setSpaAmenities(prev => prev.filter(amenity => amenity.amenity_id !== amenityId))
      
      toast.success('–£–¥–æ–±—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ')
    } catch (err) {
      console.error('‚ùå Error removing amenity:', err)
      toast.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–¥–æ–±—Å—Ç–≤–∞')
      throw err
    }
  }

  return {
    spaAmenities,
    loading,
    error,
    addAmenity,
    updateAmenity,
    removeAmenity,
    refetch: loadSpaAmenities
  }
}

export function useAvailableAmenities(spaId: string | undefined) {
  const [availableAmenities, setAvailableAmenities] = useState<any[]>([])
  const [loading, setLoading] = useState(!!spaId)
  const [error, setError] = useState<Error | null>(null)

  useEffect(() => {
    if (spaId) {
      loadAvailableAmenities()
    }
  }, [spaId])

  const loadAvailableAmenities = async () => {
    if (!spaId) return

    try {
      setLoading(true)
      setError(null)
      console.log('üîÑ Loading available amenities for spa:', spaId)
      const data = await spaAmenitiesService.getAvailableAmenities(spaId)
      console.log('‚úÖ Available amenities loaded:', data.length)
      setAvailableAmenities(data)
    } catch (err) {
      console.error('‚ùå Error loading available amenities:', err)
      setError(err as Error)
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–¥–æ–±—Å—Ç–≤')
    } finally {
      setLoading(false)
    }
  }

  return {
    availableAmenities,
    loading,
    error,
    refetch: loadAvailableAmenities
  }
}
