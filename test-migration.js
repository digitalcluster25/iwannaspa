#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É Railway PostgreSQL + PostgREST
 */

import { Client } from 'pg';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Railway PostgreSQL
const railwayConfig = {
  host: 'switchback.proxy.rlwy.net',
  port: 44855,
  database: 'railway',
  user: 'postgres',
  password: 'piAlmgrclkSirLRLJfGwJizmKrIpKaXs',
  ssl: {
    rejectUnauthorized: false
  }
};

async function testMigration() {
  const client = new Client(railwayConfig);
  
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway PostgreSQL...');
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await client.query('SET search_path TO app, public;');

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π:');
    const tables = [
      'countries', 'cities', 'categories', 'purposes', 'amenities',
      'service_templates', 'profiles', 'brands', 'spas', 'spa_services',
      'spa_amenities', 'spa_contacts', 'leads'
    ];

    let totalRecords = 0;
    for (const table of tables) {
      try {
        const result = await client.query(`SELECT COUNT(*) as count FROM app.${table}`);
        const count = parseInt(result.rows[0].count);
        console.log(`  ${table}: ${count} –∑–∞–ø–∏—Å–µ–π`);
        totalRecords += count;
      } catch (error) {
        console.log(`  ${table}: –æ—à–∏–±–∫–∞ - ${error.message}`);
      }
    }

    console.log(`\nüìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalRecords}`);

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
    console.log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏:');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –°–ü–ê —Å –≥–æ—Ä–æ–¥–∞–º–∏
      const spaCitiesResult = await client.query(`
        SELECT s.name as spa_name, c.name as city_name 
        FROM app.spas s 
        LEFT JOIN app.cities c ON s.city_id = c.id 
        LIMIT 5
      `);
      console.log('  –°–ü–ê ‚Üî –ì–æ—Ä–æ–¥–∞:');
      spaCitiesResult.rows.forEach(row => {
        console.log(`    ${row.spa_name} ‚Üí ${row.city_name || '–ë–µ–∑ –≥–æ—Ä–æ–¥–∞'}`);
      });
    } catch (error) {
      console.log('  –°–ü–ê ‚Üî –ì–æ—Ä–æ–¥–∞: –æ—à–∏–±–∫–∞ -', error.message);
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –°–ü–ê —Å —É—Å–ª—É–≥–∞–º–∏
      const spaServicesResult = await client.query(`
        SELECT s.name as spa_name, COUNT(ss.id) as services_count
        FROM app.spas s 
        LEFT JOIN app.spa_services ss ON s.id = ss.spa_id 
        GROUP BY s.id, s.name
        LIMIT 5
      `);
      console.log('  –°–ü–ê ‚Üî –£—Å–ª—É–≥–∏:');
      spaServicesResult.rows.forEach(row => {
        console.log(`    ${row.spa_name}: ${row.services_count} —É—Å–ª—É–≥`);
      });
    } catch (error) {
      console.log('  –°–ü–ê ‚Üî –£—Å–ª—É–≥–∏: –æ—à–∏–±–∫–∞ -', error.message);
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–µ–π
    console.log('\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    try {
      const profilesResult = await client.query(`
        SELECT name, role, active, created_at 
        FROM app.profiles 
        ORDER BY created_at DESC
      `);
      console.log('  –ü—Ä–æ—Ñ–∏–ª–∏:');
      profilesResult.rows.forEach(row => {
        console.log(`    ${row.name} (${row.role}) - ${row.active ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
      });
    } catch (error) {
      console.log('  –ü—Ä–æ—Ñ–∏–ª–∏: –æ—à–∏–±–∫–∞ -', error.message);
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgREST API
    console.log('\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgREST API:');
    try {
      const response = await fetch('https://postgrestpostgrest-production-44bc.up.railway.app/countries');
      if (response.ok) {
        const data = await response.json();
        console.log(`  PostgREST API: ‚úÖ —Ä–∞–±–æ—Ç–∞–µ—Ç (${data.length} —Å—Ç—Ä–∞–Ω)`);
        console.log(`  –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${data[0]?.name || '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
      } else {
        console.log(`  PostgREST API: ‚ùå –æ—à–∏–±–∫–∞ ${response.status}`);
      }
    } catch (error) {
      console.log(`  PostgREST API: ‚ùå –æ—à–∏–±–∫–∞ - ${error.message}`);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: —Ä–∞–±–æ—Ç–∞–µ—Ç`);
    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ: ${totalRecords} –∑–∞–ø–∏—Å–µ–π –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ`);
    console.log(`‚úÖ –°–≤—è–∑–∏: –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã`);
    console.log(`‚úÖ API: –ø—Ä–æ–≤–µ—Ä–µ–Ω`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    process.exit(1);
  } finally {
    await client.end();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  testMigration().catch(console.error);
}

export { testMigration };
