#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase –≤ Railway PostgreSQL
 * –≠—Ç–∞–ø 2: –≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
 */

import { createClient } from '@supabase/supabase-js';
import { Client } from 'pg';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://ewkeuupfristqqonkcph.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV3a2V1dXBmcmlzdHFxb25rY3BoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg4NDI0MDQsImV4cCI6MjA3NDQxODQwNH0.YduF49boh1jK40-Lk1nbie9JVtF0AsPyn_08JC-HX6E';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Railway PostgreSQL
const railwayConfig = {
  host: 'switchback.proxy.rlwy.net',
  port: 44855,
  database: 'railway',
  user: 'postgres',
  password: 'piAlmgrclkSirLRLJfGwJizmKrIpKaXs',
  ssl: {
    rejectUnauthorized: false
  }
};

// –ü–æ—Ä—è–¥–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ (—É—á–∏—Ç—ã–≤–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
const TABLE_ORDER = [
  'countries',
  'cities', 
  'categories',
  'purposes',
  'amenities',
  'service_templates',
  'profiles',
  'brands',
  'spas',
  'spa_services',
  'spa_amenities',
  'spa_contacts',
  'leads'
];

// –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const FIELD_MAPPINGS = {
  'spas': {
    'reviewCount': 'review_count'
  }
};

async function migrateData() {
  const supabase = createClient(supabaseUrl, supabaseKey);
  const pgClient = new Client(railwayConfig);
  
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...');
    await pgClient.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    console.log('\nüìä –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
    
    let totalMigrated = 0;
    let totalErrors = 0;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await pgClient.query('SET search_path TO app, public;');

    for (const tableName of TABLE_ORDER) {
      try {
        console.log(`\nüîÑ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã: ${tableName}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
        const { data: supabaseData, error: supabaseError } = await supabase
          .from(tableName)
          .select('*');

        if (supabaseError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase (${tableName}):`, supabaseError.message);
          totalErrors++;
          continue;
        }

        if (!supabaseData || supabaseData.length === 0) {
          console.log(`‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ ${tableName} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }

        console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ ${supabaseData.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ Supabase`);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        const transformedData = supabaseData.map(row => {
          const transformed = { ...row };
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π
          if (FIELD_MAPPINGS[tableName]) {
            Object.entries(FIELD_MAPPINGS[tableName]).forEach(([oldField, newField]) => {
              if (transformed[oldField] !== undefined) {
                transformed[newField] = transformed[oldField];
                delete transformed[oldField];
              }
            });
          }

          return transformed;
        });

        // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ Railway (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        await pgClient.query(`DELETE FROM app.${tableName}`);

        // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Railway PostgreSQL
        if (transformedData.length > 0) {
          const columns = Object.keys(transformedData[0]);
          const placeholders = columns.map((_, index) => `$${index + 1}`).join(', ');
          const insertQuery = `
            INSERT INTO app.${tableName} (${columns.join(', ')})
            VALUES (${placeholders})
          `;

          for (const row of transformedData) {
            const values = columns.map(col => {
              const value = row[col];
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
              if (Array.isArray(value)) {
                return value; // PostgreSQL –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤—ã –Ω–∞–ø—Ä—è–º—É—é
              }
              return value;
            });

            await pgClient.query(insertQuery, values);
          }

          console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${transformedData.length} –∑–∞–ø–∏—Å–µ–π –≤ Railway PostgreSQL`);
          totalMigrated += transformedData.length;
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, error.message);
        totalErrors++;
      }
    }

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:');
    console.log(`‚úÖ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${totalMigrated}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${totalErrors}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π:');
    for (const tableName of TABLE_ORDER) {
      try {
        const result = await pgClient.query(`SELECT COUNT(*) as count FROM app.${tableName}`);
        const count = result.rows[0].count;
        console.log(`  ${tableName}: ${count} –∑–∞–ø–∏—Å–µ–π`);
      } catch (error) {
        console.log(`  ${tableName}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - ${error.message}`);
      }
    }

    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgREST API');
    console.log('2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    console.log('3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    process.exit(1);
  } finally {
    await pgClient.end();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  migrateData().catch(console.error);
}

export { migrateData };
